#pragma once
#include <glad/glad.h>
#include <cstdint>

// OpenGL can also use compressed format, but it's not renderable
// (only used for loading texture and sampling), so we temporarily
// do not define it here.

#define GL_HELPER_TYPE_SPECIALIZE(rawType, glVal)\
template<> struct ToGLType<rawType>{ static constexpr auto safe_value = RawDataType{glVal};\
    static constexpr auto value = glVal; };

#define GL_HELPER_SIZED_TYPE_SPECIALIZE(rawType, SizedTag, glVal, glRevVal)\
template<> struct ToGLType<rawType, CPUComponentSizeTag::SizedTag>{ \
    static constexpr auto safe_value = RawDataType{glVal}; static constexpr auto value = glVal; };\
template<> struct ToGLType<rawType, CPUComponentSizeTag::SizedTag, RevTag::Rev>{ \
    static constexpr auto safe_value = RawDataType{glRevVal}; static constexpr auto value = glRevVal; };

#define GL_HELPER_INTERNAL_FORMAT_SPECIALIZE(comp, glVal)\
template<> struct ColorInternalFormat<ColorComponents::comp>{ \
    static constexpr auto safe_value = GPUInternalFormat{glVal}; static constexpr auto value = glVal; };

#define GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(comp, size, glVal)\
template<> struct ColorInternalFormat<ColorComponents::comp, GPUColorComponentSizeTag::size>{ \
    static constexpr auto safe_value = GPUInternalFormat{glVal}; static constexpr auto value = glVal; };

#define GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(comp, size, compType, glVal)\
template<> struct ColorInternalFormat<ColorComponents::comp, GPUColorComponentSizeTag::size, \
    GPUComponentType::compType>{ static constexpr auto safe_value = GPUInternalFormat{glVal};\
    static constexpr auto value = glVal; };

#define GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(comp, glVal)\
    template<> struct SpecialInternalFormat<SpecialComponents::comp> {\
    static constexpr auto safe_value = GPUInternalFormat{glVal}; static constexpr auto value = glVal;};

#define GL_HELPER_ENABLE_VALID(T) template<> bool IsValidRenderBufferInternalFormat<T> = true;

namespace OpenGLFramework::GLHelper
{

// In bits.
enum class CPUComponentSizeTag { None, R3G3B2, R5B6G5, R4G4B4A4, R5G5B5A1, R8G8B8A8, R10G10B10A2 };
enum class RevTag { None, Rev };
enum class RawDataType: std::uint32_t {};
template<typename T, CPUComponentSizeTag = CPUComponentSizeTag::None, RevTag = RevTag::None> struct ToGLType {};

GL_HELPER_TYPE_SPECIALIZE(float, GL_FLOAT);
GL_HELPER_TYPE_SPECIALIZE(double, GL_DOUBLE);
GL_HELPER_TYPE_SPECIALIZE(std::int8_t, GL_BYTE);
GL_HELPER_TYPE_SPECIALIZE(std::uint8_t, GL_UNSIGNED_BYTE);
GL_HELPER_TYPE_SPECIALIZE(std::int16_t, GL_SHORT);
GL_HELPER_TYPE_SPECIALIZE(std::uint16_t, GL_UNSIGNED_SHORT);
GL_HELPER_TYPE_SPECIALIZE(std::int32_t, GL_INT);
GL_HELPER_TYPE_SPECIALIZE(std::uint32_t, GL_UNSIGNED_INT);

GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint8_t, R3G3B2, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV);
GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint16_t, R5B6G5, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV);
GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint16_t, R4G4B4A4, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV);
GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint16_t, R5G5B5A1, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV);
GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint32_t, R8G8B8A8, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV);
GL_HELPER_SIZED_TYPE_SPECIALIZE(std::uint32_t, R10G10B10A2, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV);

enum class ColorComponents { R, RG, RGB, RGBA };
enum class GPUColorComponentSizeTag { Default, All8, All16, All32, R2G2B2A2, R4G4B4, R4G4B4A4, R5G5B5, R10G10B10, R12G12B12, R12G12B12A12,
    R3G3B2, R5G5B5A1, R10G10B10A2, R11G11B10, R5G6B5 };
enum class GPUComponentType { UNormInt, SNormInt, Float, SInt, UInt };
enum class GPUInternalFormat : std::uint32_t {};
template<ColorComponents, GPUColorComponentSizeTag = GPUColorComponentSizeTag::Default,
    GPUComponentType = GPUComponentType::UNormInt> struct ColorInternalFormat{ };

GL_HELPER_INTERNAL_FORMAT_SPECIALIZE(R, GL_R);
GL_HELPER_INTERNAL_FORMAT_SPECIALIZE(RG, GL_RG);
GL_HELPER_INTERNAL_FORMAT_SPECIALIZE(RGB, GL_RGB);
GL_HELPER_INTERNAL_FORMAT_SPECIALIZE(RGBA, GL_RGBA);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(R, All8, GL_R8);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All8, SNormInt, GL_R8_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All8, SInt, GL_R8I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All8, UInt, GL_R8UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(R, All16, GL_R16);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All16, SNormInt, GL_R16_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All16, Float, GL_R16F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All16, SInt, GL_R16I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All16, UInt, GL_R16UI);

GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All32, Float, GL_R32F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All32, SInt, GL_R32I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(R, All32, UInt, GL_R32UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RG, All8, GL_RG8);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All8, SNormInt, GL_RG8_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All8, SInt, GL_RG8I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All8, UInt, GL_RG8UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RG, All16, GL_RG16);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All16, SNormInt, GL_RG16_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All16, Float, GL_RG16F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All16, SInt, GL_RG16I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All16, UInt, GL_RG16UI);

GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All32, Float, GL_RG32F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All32, SInt, GL_RG32I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RG, All32, UInt, GL_RG32UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, All8, GL_RGB8);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All8, SNormInt, GL_RGB8_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All8, SInt, GL_RGB8I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All8, UInt, GL_RGB8UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, All16, GL_RGB16);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All16, SNormInt, GL_RGB16_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All16, Float, GL_RGB16F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All16, SInt, GL_RGB16I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All16, UInt, GL_RGB16UI);

GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All32, Float, GL_RGB32F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All32, SInt, GL_RGB32I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGB, All32, UInt, GL_RGB32UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, All8, GL_RGBA8);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All8, SNormInt, GL_RGBA8_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All8, SInt, GL_RGBA8I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All8, UInt, GL_RGBA8UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, All16, GL_RGBA16);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All16, SNormInt, GL_RGBA16_SNORM);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All16, Float, GL_RGBA16F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All16, SInt, GL_RGBA16I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All16, UInt, GL_RGBA16UI);

GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All32, Float, GL_RGBA32F);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All32, SInt, GL_RGBA32I);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, All32, UInt, GL_RGBA32UI);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R4G4B4, GL_RGB4);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R5G5B5, GL_RGB5);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R10G10B10, GL_RGB10);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R12G12B12, GL_RGB12);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, R2G2B2A2, GL_RGBA2);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, R4G4B4A4, GL_RGBA4);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, R12G12B12A12, GL_RGBA12);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R3G3B2, GL_R3_G3_B2);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R11G11B10, GL_R11F_G11F_B10F);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGB, R5G6B5, GL_RGB565);

GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, R5G5B5A1, GL_RGB5_A1);
GL_HELPER_SIZED_INTERNAL_FORMAT_SPECIALIZE(RGBA, R10G10B10A2, GL_RGB10_A2);
GL_HELPER_INTERNAL_FORMAT_FULL_SPECIALIZE(RGBA, R10G10B10A2, UInt, GL_RGB10_A2UI);

// We don't support D32 since OpenGL spec says it's not obligated on all platforms.
enum class SpecialComponents { Depth = 0b1, Stencil = 0b10, DepthStencil = 0b11, D16 = 0b101, 
    D24 = 0b1001, D32F = 0b1101, D24S8 = 0b111, D32FS8 = 0b1011, S8 = 0b110 };

template<SpecialComponents> struct SpecialInternalFormat {};
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(Depth, GL_DEPTH_COMPONENT);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(Stencil, GL_STENCIL_INDEX);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(DepthStencil, GL_DEPTH_STENCIL);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(D16, GL_DEPTH_COMPONENT16);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(D24, GL_DEPTH_COMPONENT24);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(D32F, GL_DEPTH_COMPONENT32F);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(D24S8, GL_DEPTH24_STENCIL8);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(D32FS8, GL_DEPTH32F_STENCIL8);
GL_HELPER_SPECIAL_INTERNAL_FORMAT_SPECIALIZE(S8, GL_STENCIL_INDEX8);

}